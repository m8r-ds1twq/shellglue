using System.Collections;
// Generated by Refly
namespace ShellGlue.TestDoubles
{
    using System;
    using System.ComponentModel;
    using System.Collections.Generic;
    
    public class RecorderWriterBase : ShellGlue.WriterBase
    {
        
        private bool _isDisposed;
        
        private ShellGlue.TestDoubles.RecorderWriterBase.WriterBaseRecordings _recordings;
        
        public RecorderWriterBase(string filePath) : 
                base(filePath)
        {
            this.Recordings.NewStringRecording.Called = true;
            this.Recordings.NewStringRecording.PassedStringfilePath = filePath;
            if ((this.Recordings.NewStringRecording.ExceptionToThrow != null))
            {
                throw this.Recordings.NewStringRecording.ExceptionToThrow;
            }
        }
        
        public override bool IsDisposed
        {
            get
            {
                return this._isDisposed;
            }
            set
            {
                this._isDisposed = value;
            }
        }
        
        public virtual ShellGlue.TestDoubles.RecorderWriterBase.WriterBaseRecordings Recordings
        {
            get
            {
                if ((this._recordings == null))
                {
                    this._recordings = new WriterBaseRecordings();
                }
                return this._recordings;
            }
            set
            {
                this._recordings = value;
            }
        }
        
        public override void WriteLine(string line)
        {
            ++this.Recordings.WriteLineStringRecording.CallCount;
            this.Recordings.WriteLineStringRecording.Called = true;
            this.Recordings.WriteLineStringRecording.LastPassedStringline = line;
            this.Recordings.WriteLineStringRecording.AllPassedStringline.Add(line);
            if ((this.Recordings.WriteLineStringRecording.ExceptionToThrow != null))
            {
                throw this.Recordings.WriteLineStringRecording.ExceptionToThrow;
            }
        }
        
        public override void Dispose()
        {
            this.Recordings.DisposeRecording.Called = true;
            if ((this.Recordings.DisposeRecording.ExceptionToThrow != null))
            {
                throw this.Recordings.DisposeRecording.ExceptionToThrow;
            }
        }
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        public class DisposeRecordingRecordings
        {
            
            private bool _called;
            
            private System.Exception _exceptionToThrow;
            
            public virtual bool Called
            {
                get
                {
                    return this._called;
                }
                set
                {
                    this._called = value;
                }
            }
            
            public virtual System.Exception ExceptionToThrow
            {
                get
                {
                    return this._exceptionToThrow;
                }
                set
                {
                    this._exceptionToThrow = value;
                }
            }
        }
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        public class WriteLineStringRecordingRecordings
        {

            private int _CallCount;
            public int CallCount
            {
                get { return _CallCount; }
                set
                {
                    _CallCount = value;
                }
            }

            private List<string> _AllPassedStringline;
            public List<string> AllPassedStringline
            {
                get
                {
                    if (_AllPassedStringline == null)
                        _AllPassedStringline = new List<string>();
                    return _AllPassedStringline;
                }
                set
                {
                    _AllPassedStringline = value;
                }
            }

            private bool _called;
            
            private string _passedStringline;
            
            private System.Exception _exceptionToThrow;
            
            public virtual bool Called
            {
                get
                {
                    return this._called;
                }
                set
                {
                    this._called = value;
                }
            }
            
            public virtual System.Exception ExceptionToThrow
            {
                get
                {
                    return this._exceptionToThrow;
                }
                set
                {
                    this._exceptionToThrow = value;
                }
            }
            
            public virtual string LastPassedStringline
            {
                get
                {
                    return this._passedStringline;
                }
                set
                {
                    this._passedStringline = value;
                }
            }
        }
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        public class NewStringRecordingRecordings
        {
            
            private bool _called;
            
            private string _passedStringfilePath;
            
            private System.Exception _exceptionToThrow;
            
            public virtual bool Called
            {
                get
                {
                    return this._called;
                }
                set
                {
                    this._called = value;
                }
            }
            
            public virtual System.Exception ExceptionToThrow
            {
                get
                {
                    return this._exceptionToThrow;
                }
                set
                {
                    this._exceptionToThrow = value;
                }
            }
            
            public virtual string PassedStringfilePath
            {
                get
                {
                    return this._passedStringfilePath;
                }
                set
                {
                    this._passedStringfilePath = value;
                }
            }
        }
        
        public class WriterBaseRecordings
        {
            
            private ShellGlue.TestDoubles.RecorderWriterBase.NewStringRecordingRecordings _newStringRecording;
            
            private ShellGlue.TestDoubles.RecorderWriterBase.WriteLineStringRecordingRecordings _writeLineStringRecording;
            
            private ShellGlue.TestDoubles.RecorderWriterBase.DisposeRecordingRecordings _disposeRecording;
            
            public virtual ShellGlue.TestDoubles.RecorderWriterBase.NewStringRecordingRecordings NewStringRecording
            {
                get
                {
                    if ((this._newStringRecording == null))
                    {
                        this._newStringRecording = new NewStringRecordingRecordings();
                    }
                    return this._newStringRecording;
                }
                set
                {
                    this._newStringRecording = value;
                }
            }
            
            public virtual ShellGlue.TestDoubles.RecorderWriterBase.WriteLineStringRecordingRecordings WriteLineStringRecording
            {
                get
                {
                    if ((this._writeLineStringRecording == null))
                    {
                        this._writeLineStringRecording = new WriteLineStringRecordingRecordings();
                    }
                    return this._writeLineStringRecording;
                }
                set
                {
                    this._writeLineStringRecording = value;
                }
            }
            
            public virtual ShellGlue.TestDoubles.RecorderWriterBase.DisposeRecordingRecordings DisposeRecording
            {
                get
                {
                    if ((this._disposeRecording == null))
                    {
                        this._disposeRecording = new DisposeRecordingRecordings();
                    }
                    return this._disposeRecording;
                }
                set
                {
                    this._disposeRecording = value;
                }
            }
        }
    }
}
